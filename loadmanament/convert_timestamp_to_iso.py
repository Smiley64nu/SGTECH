import os
import pandas as pd
from pymongo import MongoClient
from datetime import datetime

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
client = MongoClient('mongodb://localhost:27017/')
db = client['SGTech']
collection = db['SGTech_Data_ISO']

# ‚úÖ ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏õ‡∏µ 2023, 2024 ‡πÅ‡∏•‡∏∞ 2025
base_path = "C:/Users/User/Desktop/Work_2025/Data_2023_2024"
csv_files = {
    "2023": os.path.join(base_path, "Data_2023/Data(15min)_mean"),
    "2024": os.path.join(base_path, "Data_2024/Data(15min)_mean"),
    "2025": os.path.join(base_path, "Data_2025")  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Data_2025
}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ timestamp ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def is_iso8601(timestamp):
    try:
        datetime.fromisoformat(timestamp.replace("Z", "").split(".")[0])  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ISO 8601 (‡πÑ‡∏°‡πà‡∏°‡∏µ millisecond)
        return True
    except ValueError:
        return False

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô ISO 8601 `.000Z`
def convert_to_iso8601(timestamp):
    if is_iso8601(timestamp):
        return timestamp  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ISO 8601 ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    try:
        dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
        return dt.strftime("%Y-%m-%dT%H:%M:%S.000Z")  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ millisecond ‡πÄ‡∏õ‡πá‡∏ô `.000Z`
    except ValueError:
        print(f"‚ùå Error: Invalid timestamp format -> {timestamp}")
        return None

# ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
def process_csv_files():
    for year, folder_path in csv_files.items():
        if not os.path.exists(folder_path):
            print(f"‚ö† ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder_path} ‡πÑ‡∏°‡πà‡∏û‡∏ö, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
            continue
        
        for filename in os.listdir(folder_path):
            if filename.endswith(".csv"):
                file_path = os.path.join(folder_path, filename)
                
                # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô CSV
                df = pd.read_csv(file_path)

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'timestamp' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if 'timestamp' not in df.columns:
                    print(f"‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'timestamp' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
                    continue
                
                # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô ISO 8601 ‡∏û‡∏£‡πâ‡∏≠‡∏° `.000Z`
                df["timestamp"] = df["timestamp"].apply(convert_to_iso8601)
                
                # ‚úÖ ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà timestamp ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                df = df.dropna(subset=["timestamp"])
                
                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏µ
                df["year"] = year
                
                # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô JSON
                records = df.to_dict(orient="records")

                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
                if records:
                    collection.insert_many(records)
                    print(f"‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {len(records)} records ‡∏à‡∏≤‡∏Å {filename} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    print(f"‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")

# ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if __name__ == "__main__":
    process_csv_files()
    print("üéØ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB ‡πÅ‡∏•‡πâ‡∏ß")
